// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0
// source: f3.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileClientClient is the client API for FileClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileClientClient interface {
	LoadFiles(ctx context.Context, in *Files, opts ...grpc.CallOption) (*Files, error)
	UploadFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*ID, error)
}

type fileClientClient struct {
	cc grpc.ClientConnInterface
}

func NewFileClientClient(cc grpc.ClientConnInterface) FileClientClient {
	return &fileClientClient{cc}
}

func (c *fileClientClient) LoadFiles(ctx context.Context, in *Files, opts ...grpc.CallOption) (*Files, error) {
	out := new(Files)
	err := c.cc.Invoke(ctx, "/f3.FileClient/LoadFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClientClient) UploadFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/f3.FileClient/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileClientServer is the server API for FileClient service.
// All implementations must embed UnimplementedFileClientServer
// for forward compatibility
type FileClientServer interface {
	LoadFiles(context.Context, *Files) (*Files, error)
	UploadFile(context.Context, *File) (*ID, error)
	mustEmbedUnimplementedFileClientServer()
}

// UnimplementedFileClientServer must be embedded to have forward compatible implementations.
type UnimplementedFileClientServer struct {
}

func (UnimplementedFileClientServer) LoadFiles(context.Context, *Files) (*Files, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadFiles not implemented")
}
func (UnimplementedFileClientServer) UploadFile(context.Context, *File) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileClientServer) mustEmbedUnimplementedFileClientServer() {}

// UnsafeFileClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileClientServer will
// result in compilation errors.
type UnsafeFileClientServer interface {
	mustEmbedUnimplementedFileClientServer()
}

func RegisterFileClientServer(s grpc.ServiceRegistrar, srv FileClientServer) {
	s.RegisterService(&FileClient_ServiceDesc, srv)
}

func _FileClient_LoadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Files)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileClientServer).LoadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/f3.FileClient/LoadFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileClientServer).LoadFiles(ctx, req.(*Files))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileClient_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileClientServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/f3.FileClient/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileClientServer).UploadFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

// FileClient_ServiceDesc is the grpc.ServiceDesc for FileClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "f3.FileClient",
	HandlerType: (*FileClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadFiles",
			Handler:    _FileClient_LoadFiles_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _FileClient_UploadFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "f3.proto",
}
