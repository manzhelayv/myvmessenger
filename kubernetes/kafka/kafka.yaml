---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: confluent
spec:
  type: LoadBalancer
  ports:
    - port: 2181
      name: zookeeper1
      protocol: TCP
    - port: 2888
      name: zookeeper2
      protocol: TCP
    - port: 3888
      name: zookeeper3
      protocol: TCP 
  selector:
    app: zookeeper
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: confluent
spec:
  selector:
    matchLabels:
      app: zookeeper
  replicas: 1
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      volumes:
        - name: zookeeper-data
          persistentVolumeClaim:
            claimName: zookeeper-pvc-data
        - name: zookeeper-log
          persistentVolumeClaim:
            claimName: zookeeper-pvc-log 
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:latest
          envFrom:
            - configMapRef:
                name: zookeeper-secret
          ports:
            - name: zookeeper1
              containerPort: 2181
            - name: zookeeper2
              containerPort: 2888
            - name: zookeeper3
              containerPort: 3888
          volumeMounts:
            - name: zookeeper-data
              mountPath: "/var/lib/zookeeper/data"
            - name: zookeeper-log
              mountPath: "/var/lib/zookeeper/log"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: kafka
  name: kafka
  namespace: confluent
spec:
  selector:
    service: kafka
  ports:
    - name: external
      port: 29092
      targetPort: 29092
    - name: internal
      port: 9092
      targetPort: 9092
      nodePort: 30092
    - name: backend
      port: 29094
      targetPort: 29094
  type: NodePort
---     
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    service: kafka
  name: kafka
  namespace: confluent
spec:
  serviceName: kafka
  replicas: 1
  selector:
    matchLabels:
      service: kafka
  template:
    metadata:
      labels:
        network/kafka-network: "true"
        service: kafka
    spec:
      enableServiceLinks: false
      volumes:
        - name: kafka-data
          persistentVolumeClaim:
            claimName: kafka-pvc-data
        - name: kafka-log
          persistentVolumeClaim:
            claimName: kafka-pvc-log 
        - name: kafka-secrets
          persistentVolumeClaim:
            claimName: kafka-pvc-secrets
      containers:
      - name: kafka
        imagePullPolicy: IfNotPresent
        image: confluentinc/cp-kafka
        ports:
          - containerPort: 29094
          - containerPort: 9092
        envFrom:
          - configMapRef:
              name: kafka-secret
        volumeMounts:
          - name: kafka-data
            mountPath: "/var/log"
          - name: kafka-log
            mountPath: "/var/lib/kafka/data"
          - name: kafka-secrets
            mountPath: "/etc/kafka/secrets"
        resources: {}
      hostname: kafka
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: rest-proxy
  namespace: confluent
spec:
  type: LoadBalancer
  ports:
    - port: 30081
      name: outport
      targetPort: 30081
      nodePort: 30081
  type: NodePort
  selector:
    app: rest-proxy
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rest-proxy
  namespace: confluent
spec:
  selector:
    matchLabels:
      app: rest-proxy
  replicas: 1
  template:
    metadata:
      labels:
        app: rest-proxy
    spec:
      containers:
        - name: kafka
          image: confluentinc/cp-kafka-rest:7.3.1
          envFrom:
            - configMapRef:
                name: rest-proxy-secret
          ports:
            - containerPort: 30081
          resources: {}
      hostname: rest-proxy
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: connect
  namespace: confluent
spec:
  type: LoadBalancer
  ports:
    - port: 8083
      name: connect
      protocol: TCP
      nodePort: 30077
  selector:
    app: connect
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: connect
  namespace: confluent
spec:
  selector:
    matchLabels:
      app: connect
  replicas: 1
  template:
    metadata:
      labels:
        app: connect
    spec:
      containers:
        - name: connect
          image: debezium/connect:3.0.0.Final
          envFrom:
            - configMapRef:
                name: connect-secret
          ports:
            - name: connect
              containerPort: 8083  
      hostname: connect
      restartPolicy: Always   
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: schema-registry
  name: schema-registry
  namespace: confluent
spec:
  ports:
    - port: 30082
      name: outport
      targetPort: 30082
      nodePort: 30082
  type: NodePort
  selector:
    service: schema-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    service: schema-registry
  name: schema-registry
  namespace: confluent
spec:
  replicas: 1
  selector:
    matchLabels:
      service: schema-registry
  template:
    metadata:
      labels:
        network/kafka-network: "true"
        service: schema-registry
    spec:
      enableServiceLinks: false
      containers:
        - envFrom:
            - configMapRef:
                name: schema-registry-secret
          image: confluentinc/cp-schema-registry
          name: schema-registry
          ports:
            - containerPort: 30082
          resources: {}
      hostname: schema-registry
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: ksqldb-server
  name: ksqldb-server
  namespace: confluent
spec:
  ports:
    - port: 8088
      name: outport
      targetPort: 8088
      nodePort: 30083
  type: NodePort
  selector:
    service: ksqldb-server
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    service: ksqldb-server
  name: ksqldb-server
  namespace: confluent
spec:
  replicas: 1
  selector:
    matchLabels:
      service: ksqldb-server
  template:
    metadata:
      labels:
        service: ksqldb-server
    spec:
      #volumes:
      #  - name: connect-data
      #    persistentVolumeClaim:
      #      claimName: connect-pvc
      enableServiceLinks: false
      containers:
        - envFrom:
            - configMapRef:
                name: ksqldb-server-secret
          image: confluentinc/cp-ksqldb-server:latest
          name: ksqldb-server
          ports:
            - containerPort: 8088
          #volumeMounts:
          #  - name: connect-data
          #    mountPath: "/curl.sh"
          #    subPath: curl.sh
          #    readOnly: true
          #command:
          #  - bash
          #  - -c
          #  - |
          #    /curl.sh
          resources: {}
      hostname: ksqldb-server
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: debezium-ui
  name: debezium-ui
  namespace: confluent
spec:
  ports:
    - port: 30086
      name: outport
      targetPort: 30084
      nodePort: 30086
  type: NodePort
  selector:
    service: debezium-ui
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    service: debezium-ui
  name: debezium-ui
  namespace: confluent
spec:
  replicas: 1
  selector:
    matchLabels:
      service: debezium-ui
  template:
    metadata:
      labels:
        network/kafka-network: "true"
        service: debezium-ui
    spec:
      enableServiceLinks: false
      containers:
        - name: debezium-ui
          image: debezium/debezium-ui:latest
          envFrom:
            - configMapRef:
                name: debezium-ui-secret
          ports:
            - containerPort: 30084
          resources: {}
      hostname: debezium-ui
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: akhq
  name: akhq
  namespace: confluent
spec:
  ports:
    - port: 8080
      name: outport
      targetPort: 8080
      nodePort: 30084
  type: NodePort
  selector:
    service: akhq
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    service: akhq
  name: akhq
  namespace: confluent
spec:
  replicas: 1
  selector:
    matchLabels:
      service: akhq
  template:
    metadata:
      labels:
        service: akhq
    spec:
      volumes:
        - name: akhq-data
          persistentVolumeClaim:
            claimName: akhq-pvc-data
      enableServiceLinks: false
      containers:
        - image: tchiotludo/akhq:latest
          name: akhq
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: akhq-data
              mountPath: "/app/application.yml"
              subPath: application.yml
              readOnly: true
          resources: {}
      hostname: akhq
      restartPolicy: Always
---







